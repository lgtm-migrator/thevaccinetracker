{"version":3,"sources":["webpack:///./src/components/developersDetail/DevelopersDetail.js"],"names":["DevelopersDetail","state","vaccineList","searchEntered","componentDidMount","this","setState","props","vaccines","map","vaccine","stage","parseInt","currentstage","charAt","phase","split","updateSearch","event","target","value","render","Loading","type","color","height","width","style","textAlign","MainOrganisationBox","filter","vaccineDeveloper","developersname","toLowerCase","indexOf","index","key","slice","showDataFor","className","title","showSearch","placeholder","onChange","bind","aria-hidden","length","React","Component","data","allGoogleSheetVaccineDataRow","edges","forEach","edge","node"],"mappings":"m/BAMMA,E,oBACJ,aAAe,IAAD,SACZ,sBACKC,MAAQ,CACXC,YAAa,GACbC,cAAe,IAJL,E,kHAQdC,kBAAA,WACEC,KAAKC,SAAS,CACZJ,YAAaG,KAAKE,MAAMC,SAASC,KAAI,SAAAC,GAAO,wBACvCA,EADuC,CAE1CC,MAAOC,SAASF,EAAQG,aAAaC,OAAO,IAC5CC,MAAOH,SAASF,EAAQG,aAAaG,MAAM,SAAS,KAAO,a,EAKjEC,aAAA,SAAaC,GACXb,KAAKC,SAAS,CACZH,cAAee,EAAMC,OAAOC,S,EAIhCC,OAAA,WAAU,IAAD,OACDC,EAAU,WACd,OACE,kBAAC,IAAD,CACEC,KAAK,UACLC,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,MAAO,CACLC,UAAW,aAMbC,EAAsB,WAW1B,OAV0B,EAAK5B,MAAMC,YAAY4B,QAC/C,SAAAC,GACE,OAG0D,IAFxDA,EAAiBC,eACdC,cACAC,QAAQ,EAAKjC,MAAME,cAAc8B,kBAMvCxB,KAAI,SAACC,EAASyB,GAEb,OAAO,kBAAC,IAAD,CAAaC,IAAKD,EAAOzB,QAASA,OAE1C2B,MAAM,EAAG,EAAK9B,MAAM+B,cAEzB,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,WACb,4BAAKlC,KAAKE,MAAMiC,SAES,IAA1BnC,KAAKE,MAAMkC,WACV,yBAAKF,UAAU,UACb,yBAAKA,UAAU,iBACb,2BACEG,YAAY,+BACZnB,KAAK,OACLH,MAAOf,KAAKJ,MAAME,cAClBwC,SAAUtC,KAAKY,aAAa2B,KAAKvC,QAEnC,uBAAGwC,cAAY,OAAON,UAAU,kBAIpC,yBAAKA,UAAU,YAIgB,IAAlClC,KAAKJ,MAAMC,YAAY4C,OACtB,kBAACxB,EAAD,MAEA,kBAACO,EAAD,Q,GApFqBkB,IAAMC,WA2FtB,aAAAzC,GACb,IAAM0C,EAAI,OAkBNzC,EAAW,GAKf,OAJAyC,EAAKC,6BAA6BC,MAAMC,SAAQ,SAAAC,GAC9C,IAAM3C,EAAU2C,EAAKC,KACrB9C,EAAQ,YAAOA,GAAP,kBAAsBE,QAEzB,kBAACV,EAAD,iBAAsBO,EAAtB,CAA6BC,SAAUA,O","file":"2b95d884fcf42a1a641f3c0338301b11a685bb9e-54167b73d0cc7997cc98.js","sourcesContent":["import Loader from 'react-loader-spinner'\nimport React from 'react'\n// import { vaccineObj } from '../../contants/conts.js'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport VaccineCard from '../vaccineCard/vaccineCard'\n\nclass DevelopersDetail extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      vaccineList: [],\n      searchEntered: ''\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      vaccineList: this.props.vaccines.map(vaccine => ({\n        ...vaccine,\n        stage: parseInt(vaccine.currentstage.charAt(1)),\n        phase: parseInt(vaccine.currentstage.split('Phase')[1]) || null\n      }))\n    })\n  }\n\n  updateSearch(event) {\n    this.setState({\n      searchEntered: event.target.value\n    })\n  }\n\n  render() {\n    const Loading = () => {\n      return (\n        <Loader\n          type=\"Circles\"\n          color=\"#FEB9D3\"\n          height={40}\n          width={40}\n          style={{\n            textAlign: 'center'\n          }}\n        />\n      )\n    }\n\n    const MainOrganisationBox = () => {\n      let filteredVaccineList = this.state.vaccineList.filter(\n        vaccineDeveloper => {\n          return (\n            vaccineDeveloper.developersname\n              .toLowerCase()\n              .indexOf(this.state.searchEntered.toLowerCase()) !== -1\n          )\n        }\n      )\n\n      return filteredVaccineList\n        .map((vaccine, index) => {\n          // let vaccineStage = vaccineObj[vaccine.currentstage]\n          return <VaccineCard key={index} vaccine={vaccine} />\n        })\n        .slice(0, this.props.showDataFor)\n    }\n    return (\n      <div className=\"developersDetailedStages\">\n        <div className=\"devlopersHeader\">\n          <div className=\"heading\">\n            <h1>{this.props.title}</h1>\n          </div>\n          {this.props.showSearch === true ? (\n            <div className=\"search\">\n              <div className=\"ui icon input\">\n                <input\n                  placeholder=\"Search for Vaccine Developer\"\n                  type=\"text\"\n                  value={this.state.searchEntered}\n                  onChange={this.updateSearch.bind(this)}\n                />\n                <i aria-hidden=\"true\" className=\"search icon\" />\n              </div>\n            </div>\n          ) : (\n            <div className=\"search\" />\n          )}\n        </div>\n\n        {this.state.vaccineList.length === 0 ? (\n          <Loading />\n        ) : (\n          <MainOrganisationBox />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default props => {\n  const data = useStaticQuery(graphql`\n    query {\n      allGoogleSheetVaccineDataRow {\n        edges {\n          node {\n            id\n            no\n            slug\n            currentstage\n            developersname\n            rawphases\n            researcherid\n          }\n        }\n        totalCount\n      }\n    }\n  `)\n  let vaccines = []\n  data.allGoogleSheetVaccineDataRow.edges.forEach(edge => {\n    const vaccine = edge.node\n    vaccines = [...vaccines, { ...vaccine }]\n  })\n  return <DevelopersDetail {...props} vaccines={vaccines} />\n}\n"],"sourceRoot":""}